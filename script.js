// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π Cash Flow
const cashFlowProfessions = [
  {
    name: "–û—Ñ–∏—Ü–µ—Ä –ì–ò–ë–î–î",
    icon: "üëÆ",
    salary: 3000,
    expenses: {
      taxes: 580,
      homePayment: 400,
      schoolLoan: 0,
      carLoan: 100,
      creditCard: 60,
      retail: 50,
      other: 690,
      childExpensePerChild: 160
    },
    liabilities: {
      homeMortgage: 46000,
      schoolLoan: 0,
      carLoan: 5000,
      creditCards: 2000,
      retailDebt: 1000
    },
    savings: 520
  },
  {
    name: "–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä",
    icon: "üíº",
    salary: 4600,
    expenses: {
      taxes: 910,
      homePayment: 700,
      schoolLoan: 60,
      carLoan: 120,
      creditCard: 90,
      retail: 50,
      other: 1000,
      childExpensePerChild: 240
    },
    liabilities: {
      homeMortgage: 75000,
      schoolLoan: 12000,
      carLoan: 6000,
      creditCards: 3000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–ü–∏–ª–æ—Ç",
    icon: "‚úàÔ∏è",
    salary: 9500,
    expenses: {
      taxes: 2350,
      homePayment: 1330,
      schoolLoan: 0,
      carLoan: 300,
      creditCard: 660,
      retail: 50,
      other: 2210,
      childExpensePerChild: 480
    },
    liabilities: {
      homeMortgage: 143000,
      schoolLoan: 0,
      carLoan: 15000,
      creditCards: 22000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–®–≤–µ–π—Ü–∞—Ä",
    icon: "üè®",
    salary: 1600,
    expenses: {
      taxes: 280,
      homePayment: 200,
      schoolLoan: 0,
      carLoan: 60,
      creditCard: 60,
      retail: 50,
      other: 300,
      childExpensePerChild: 70
    },
    liabilities: {
      homeMortgage: 202000,
      schoolLoan: 150000,
      carLoan: 19000,
      creditCards: 9000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–ú–µ—Ö–∞–Ω–∏–∫",
    icon: "üîß",
    salary: 2000,
    expenses: {
      taxes: 360,
      homePayment: 300,
      schoolLoan: 0,
      carLoan: 60,
      creditCard: 60,
      retail: 50,
      other: 450,
      childExpensePerChild: 110
    },
    liabilities: {
      homeMortgage: 31000,
      schoolLoan: 0,
      carLoan: 3000,
      creditCards: 2000,
      retailDebt: 1000
    },
    savings: 670
  },
  {
    name: "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞",
    icon: "üë©‚Äç‚öïÔ∏è",
    salary: 3100,
    expenses: {
      taxes: 600,
      homePayment: 400,
      schoolLoan: 30,
      carLoan: 100,
      creditCard: 90,
      retail: 50,
      other: 710,
      childExpensePerChild: 170
    },
    liabilities: {
      homeMortgage: 47000,
      schoolLoan: 6000,
      carLoan: 5000,
      creditCards: 3000,
      retailDebt: 1000
    },
    savings: 480
  },
  {
    name: "–í–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞",
    icon: "üöõ",
    salary: 2500,
    expenses: {
      taxes: 460,
      homePayment: 400,
      schoolLoan: 0,
      carLoan: 80,
      creditCard: 60,
      retail: 50,
      other: 570,
      childExpensePerChild: 140
    },
    liabilities: {
      homeMortgage: 38000,
      schoolLoan: 0,
      carLoan: 4000,
      creditCards: 2000,
      retailDebt: 1000
    },
    savings: 750
  },
  {
    name: "–í—Ä–∞—á",
    icon: "üë®‚Äç‚öïÔ∏è",
    salary: 13200,
    expenses: {
      taxes: 3420,
      homePayment: 1900,
      schoolLoan: 750,
      carLoan: 380,
      creditCard: 270,
      retail: 50,
      other: 2880,
      childExpensePerChild: 640
    },
    liabilities: {
      homeMortgage: 202000,
      schoolLoan: 150000,
      carLoan: 19000,
      creditCards: 9000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–£—á–∏—Ç–µ–ª—å",  
    icon: "üë©‚Äçüè´",
    salary: 3300,
    expenses: {
      taxes: 630,
      homePayment: 500,
      schoolLoan: 60,
      carLoan: 100,
      creditCard: 90,
      retail: 50,
      other: 760,
      childExpensePerChild: 180
    },
    liabilities: {
      homeMortgage: 50000,
      schoolLoan: 12000,
      carLoan: 5000,
      creditCards: 3000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–ê–¥–≤–æ–∫–∞—Ç",
    icon: "‚öñÔ∏è",
    salary: 7500,
    expenses: {
      taxes: 1830,
      homePayment: 1100,
      schoolLoan: 390,
      carLoan: 220,
      creditCard: 180,
      retail: 50,
      other: 1650,
      childExpensePerChild: 640
    },
    liabilities: {
      homeMortgage: 115000,
      schoolLoan: 78000,
      carLoan: 11000,
      creditCards: 6000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
    icon: "üìê",
    salary: 4900,
    expenses: {
      taxes: 1050,
      homePayment: 700,
      schoolLoan: 60,
      carLoan: 140,
      creditCard: 120,
      retail: 50,
      other: 1090,
      childExpensePerChild: 250
    },
    liabilities: {
      homeMortgage: 75000,
      schoolLoan: 12000,
      carLoan: 7000,
      creditCards: 4000,
      retailDebt: 1000
    },
    savings: 400
  },
  {
    name: "–°–µ–∫—Ä–µ—Ç–∞—Ä—å",
    icon: "üìã",
    salary: 2500,
    expenses: {
      taxes: 460,
      homePayment: 400,
      schoolLoan: 0,
      carLoan: 80,
      creditCard: 60,
      retail: 50,
      other: 570,
      childExpensePerChild: 140
    },
    liabilities: {
      homeMortgage: 38000,
      schoolLoan: 0,
      carLoan: 4000,
      creditCards: 2000,
      retailDebt: 1000
    },
    savings: 710
  }
];

// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π "–°–µ–∫—Ä–µ—Ç –¥–µ–Ω–µ–≥"
const secretOfMoneyProfessions = [
  {name: "–£—á–∏—Ç–µ–ª—å", icon: "üë©‚Äçüè´", salary: 7000, expenses: 4200, profit: 2800, savings: 20000},
  {name: "–ú–∞–ª—è—Ä", icon: "üé®", salary: 10000, expenses: 6100, profit: 4600, savings: 18000},
  {name: "–°–µ–∫—Ä–µ—Ç–∞—Ä—å", icon: "üìã", salary: 12000, expenses: 7400, profit: 4600, savings: 18000},
  {name: "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", icon: "üèóÔ∏è", salary: 13000, expenses: 8200, profit: 4800, savings: 17000},
  {name: "–ö—Ä–æ–≤–µ–ª—å—â–∏–∫", icon: "üè†", salary: 15000, expenses: 9600, profit: 5400, savings: 16000},
  {name: "–í–æ–¥–∏—Ç–µ–ª—å", icon: "üöó", salary: 16000, expenses: 10400, profit: 5600, savings: 15000},
  {name: "–ö–æ–Ω–¥–∏—Ç–µ—Ä", icon: "üç∞", salary: 17000, expenses: 11200, profit: 5800, savings: 14000},
  {name: "–û—Ñ–∏—Ü–µ—Ä –ì–ò–ë–î–î", icon: "üëÆ", salary: 18000, expenses: 12000, profit: 6000, savings: 13000},
  {name: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–ª—É–∂–∞—â–∏–π", icon: "üè¶", salary: 20000, expenses: 13600, profit: 6400, savings: 12000},
  {name: "–•–∏—Ä—É—Ä–≥", icon: "üë®‚Äç‚öïÔ∏è", salary: 24000, expenses: 16600, profit: 7400, savings: 11000},
  {name: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", icon: "üèõÔ∏è", salary: 25000, expenses: 17500, profit: 7500, savings: 10000},
  {name: "–≠–ª–∏—Ç–Ω—ã–π –¥–æ–º—Ä–∞–±–æ—Ç–Ω–∏–∫", icon: "üè†", salary: 30000, expenses: 21300, profit: 8700, savings: 9000},
  {name: "–®–µ—Ñ-–ø–æ–≤–∞—Ä", icon: "üë®‚Äçüç≥", salary: 40000, expenses: 28800, profit: 11200, savings: 8000},
  {name: "–ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä", icon: "üìä", salary: 50000, expenses: 36500, profit: 13500, savings: 7000},
  {name: "–ê–≤–∏–∞ –ø–∏–ª–æ—Ç", icon: "‚úàÔ∏è", salary: 60000, expenses: 44400, profit: 15600, savings: 6000},
  {name: "–î–∏—Ä–µ–∫—Ç–æ—Ä", icon: "üëî", salary: 80000, expenses: 60000, profit: 20000, savings: 5000}
];

// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
const APP_VERSION = '1.1.0';
const STORAGE_KEY = 'cashFlowGameData';

let isStorageAvailable = true;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentScreen = 1;
let currentUser = null;
let selectedProfession = null;
let gameType = null; // 'cashflow' –∏–ª–∏ 'secret'
let gameData = {
  wallet: 0,
  passiveIncome: 0,
  expenses: {},
  assets: [],
  children: 0,
  round: 1,
  secretData: {
    inventory: 100,
    passiveIncome: 0,
    networkIncome: 0
  }
};

let pendingUpdateNotice = null;

let cashFlowStage = 1;
let stageTwoUnlocked = false;
let stageTwoBasePassive = 0;
let stageTwoInitialPassive = 0;
let stageTwoAdditionalPassive = 0;
let dreamPurchased = false;
const STAGE_TWO_TARGET_INCREMENT = 50000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  isStorageAvailable = checkLocalStorageAvailability();
  applyAppVersion();
  loadGameData();
  initializeProfessions();
  setupEventListeners();

  let noticeTitle = null;
  let noticeMessage = null;

  if (!isStorageAvailable) {
    noticeTitle = '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    noticeMessage = '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É, –Ω–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø–∞–¥—É—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
  }

  if (pendingUpdateNotice) {
    if (noticeMessage) {
      noticeMessage += `\n\n${pendingUpdateNotice}`;
    } else {
      noticeTitle = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1.1.0';
      noticeMessage = pendingUpdateNotice;
    }
    pendingUpdateNotice = null;
  }

  if (noticeMessage) {
    showModal(noticeTitle, noticeMessage);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
  showScreen(1);
});

function applyAppVersion() {
  const versionLabel = document.getElementById('appVersion');
  if (versionLabel) {
    versionLabel.textContent = `v${APP_VERSION}`;
  }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function navigateToScreen(screenNumber) {
  showScreen(screenNumber);
  currentScreen = screenNumber;
  saveGameData();
}

function showScreen(screenNumber) {
  // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
  const screens = document.querySelectorAll('.screen');
  screens.forEach(screen => {
    screen.style.display = 'none';
    screen.classList.remove('active');
  });

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
  const targetScreen = document.getElementById(`screen${screenNumber}`);
  if (targetScreen) {
    targetScreen.style.display = 'block';
    targetScreen.classList.add('active');
    window.scrollTo(0, 0);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
function initializeProfessions() {
  // Cash Flow –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  const cashFlowContainer = document.getElementById('cashFlowProfessions');
  if (cashFlowContainer) {
    cashFlowContainer.innerHTML = '';
    cashFlowProfessions.forEach((profession, index) => {
      const professionItem = createProfessionItem(profession, index, 'cashflow');
      cashFlowContainer.appendChild(professionItem);
    });
  }
  
  // –°–µ–∫—Ä–µ—Ç –¥–µ–Ω–µ–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  const secretContainer = document.getElementById('secretMoneyProfessions');
  if (secretContainer) {
    secretContainer.innerHTML = '';
    secretOfMoneyProfessions.forEach((profession, index) => {
      const professionItem = createProfessionItem(profession, index, 'secret');
      secretContainer.appendChild(professionItem);
    });
  }
}

function createProfessionItem(profession, index, type) {
  const div = document.createElement('div');
  div.className = 'profession-item';
  div.innerHTML = `
    <div class="profession-icon">${profession.icon}</div>
    <div class="profession-name">${profession.name}</div>
  `;
  div.onclick = () => selectProfession(index, type);
  return div;
}

function selectProfession(index, type) {
  if (type === 'cashflow') {
    selectedProfession = cashFlowProfessions[index];
    gameType = 'cashflow';
    initializeCashFlowGame();
    navigateToScreen(6);
  } else {
    selectedProfession = secretOfMoneyProfessions[index];
    gameType = 'secret';
    initializeSecretGame();
    navigateToScreen(7);
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function validateRegistration() {
  const nickname = document.getElementById('nickname');
  const password = document.getElementById('password');
  const nicknameValidation = document.getElementById('nicknameValidation');
  const passwordValidation = document.getElementById('passwordValidation');
  
  let isValid = true;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
  const nicknameRegex = /^[a-zA-Z0-9\-_*.]{1,20}$/;
  if (!nicknameRegex.test(nickname.value)) {
    nicknameValidation.textContent = '–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã –∏ -_*. (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤)';
    nicknameValidation.className = 'validation-message error';
    isValid = false;
  } else {
    nicknameValidation.textContent = '‚úì –ù–∏–∫–Ω–µ–π–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π';
    nicknameValidation.className = 'validation-message success';
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{1,10}$/;
  if (!passwordRegex.test(password.value)) {
    passwordValidation.textContent = '–ù—É–∂–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞ (–¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤)';
    passwordValidation.className = 'validation-message error';
    isValid = false;
  } else {
    passwordValidation.textContent = '‚úì –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π';
    passwordValidation.className = 'validation-message success';
  }
  
  return isValid;
}

function validateAndRegister(event) {
  event.preventDefault();
  
  if (validateRegistration()) {
    const nickname = document.getElementById('nickname').value;
    currentUser = {
      nickname: nickname,
      registeredAt: new Date()
    };
    
    showModal('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${nickname}!`);
    setTimeout(() => {
      closeModal();
      navigateToScreen(3);
    }, 2000);
  }
  
  return false;
}

function socialLogin(provider) {
  showModal('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', `–í—Ö–æ–¥ —á–µ—Ä–µ–∑ ${provider} (–¥–µ–º–æ-—Ä–µ–∂–∏–º)`);
  currentUser = {
    nickname: `User_${provider}`,
    provider: provider,
    registeredAt: new Date()
  };
  
  setTimeout(() => {
    closeModal();
    navigateToScreen(3);
  }, 1500);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const nickname = document.getElementById('nickname');
  const password = document.getElementById('password');
  
  if (nickname) {
    nickname.addEventListener('input', validateRegistration);
  }
  
  if (password) {
    password.addEventListener('input', validateRegistration);
  }

  const dreamInput = document.getElementById('playerDream');
  if (dreamInput) {
    dreamInput.addEventListener('input', () => {
      const stage2DreamDisplay = document.getElementById('stage2DreamDisplay');
      if (stage2DreamDisplay) {
        const dreamValue = dreamInput.value.trim() || '‚Äî';
        stage2DreamDisplay.textContent = dreamValue;
      }
    });
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(saveGameData, 30000);
}

// === CASH FLOW –ò–ì–†–ê ===

function initializeCashFlowGame() {
  if (!selectedProfession) return;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  gameData.wallet = selectedProfession.savings;
  gameData.expenses = { ...selectedProfession.expenses };
  gameData.passiveIncome = 0;
  gameData.children = 0;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤
  cashFlowStage = 1;
  stageTwoUnlocked = false;
  stageTwoBasePassive = 0;
  stageTwoInitialPassive = 0;
  stageTwoAdditionalPassive = 0;
  dreamPurchased = false;

  const stage2Button = document.getElementById('stage2Button');
  if (stage2Button) {
    stage2Button.disabled = true;
    stage2Button.classList.remove('active');
  }

  const stage1Button = document.getElementById('stage1Button');
  if (stage1Button) {
    stage1Button.classList.add('active');
  }

  const dreamCheckbox = document.getElementById('dreamPurchased');
  if (dreamCheckbox) {
    dreamCheckbox.checked = false;
  }

  const stage2Input = document.getElementById('stage2PassiveInput');
  if (stage2Input) {
    stage2Input.value = '';
  }

  const childrenInput = document.getElementById('childrenCount');
  if (childrenInput) {
    childrenInput.value = 0;
  }
  const childrenExpenseDisplay = document.getElementById('childrenExpensesAmount');
  if (childrenExpenseDisplay) {
    childrenExpenseDisplay.textContent = '0';
  }

  const stage2Status = document.getElementById('stage2GoalStatus');
  if (stage2Status) {
    stage2Status.textContent = '–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.';
    stage2Status.classList.remove('success', 'warning');
  }

  const stage2List = document.getElementById('stage2PassiveList');
  if (stage2List) {
    stage2List.innerHTML = '';
  }

  const stage2Base = document.getElementById('stage2BasePassive');
  if (stage2Base) stage2Base.textContent = '0';

  const stage2Passive = document.getElementById('stage2PassiveIncome');
  if (stage2Passive) stage2Passive.textContent = '0';

  const stage2Wallet = document.getElementById('stage2WalletAmount');
  if (stage2Wallet) stage2Wallet.textContent = '0';

  const stage2Total = document.getElementById('stage2TotalPassive');
  if (stage2Total) stage2Total.textContent = '0';

  const stage2Target = document.getElementById('stage2TargetIncome');
  if (stage2Target) stage2Target.textContent = STAGE_TWO_TARGET_INCREMENT.toLocaleString();

  showCashflowStage(1);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  updateCashFlowDisplay();
}

function updateCashFlowDisplay() {
  if (!selectedProfession) return;

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  document.getElementById('selectedProfession').textContent = selectedProfession.name;

  const stageLabel = document.getElementById('cashflowStageLabel');
  if (stageLabel) {
    stageLabel.textContent = cashFlowStage === 1 ? '–≠—Ç–∞–ø 1: –ö—Ä—ã—Å–∏–Ω—ã–π –±–µ–≥' : '–≠—Ç–∞–ø 2: –ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–µ–∫';
  }

  const nickname = currentUser?.nickname || '–ì–æ—Å—Ç—å';
  const nicknameDisplay = document.getElementById('playerNicknameDisplay');
  if (nicknameDisplay) {
    nicknameDisplay.textContent = nickname;
  }

  const professionDisplay = document.getElementById('stage1ProfessionName');
  if (professionDisplay) {
    professionDisplay.textContent = selectedProfession.name;
  }

  const dreamInput = document.getElementById('playerDream');
  const stage2DreamDisplay = document.getElementById('stage2DreamDisplay');
  if (stage2DreamDisplay) {
    const dreamValue = dreamInput && dreamInput.value.trim() ? dreamInput.value.trim() : '‚Äî';
    stage2DreamDisplay.textContent = dreamValue;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  document.getElementById('walletAmount').textContent = `$${gameData.wallet.toLocaleString()}`;
  document.getElementById('passiveIncomeAmount').textContent = `$${gameData.passiveIncome.toLocaleString()}`;
  document.getElementById('salaryAmount').textContent = `$${selectedProfession.salary.toLocaleString()}`;

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
  updateExpensesDisplay();
  renderLiabilities();
  updateTotalExpenses();

  // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã
  updateTotalIncome();

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
  updateAvailableCredit();

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —ç—Ç–∞–ø–æ–≤
  updateStageButtons();

  if (stageTwoUnlocked) {
    updateStage2Display();
  }
}

function updateExpensesDisplay() {
  const fixedExpensesContainer = document.getElementById('fixedExpenses');
  if (!fixedExpensesContainer || !selectedProfession) return;

  const expenseLabels = {
    taxes: '–ù–∞–ª–æ–≥–∏',
    homePayment: '–û–ø–ª–∞—Ç–∞ –∑–∞–ª–æ–≥–∞/–∞—Ä–µ–Ω–¥—ã',
    schoolLoan: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ',
    carLoan: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
    creditCard: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
    retail: '–†–æ–∑–Ω–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
    other: '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
  };
  
  fixedExpensesContainer.innerHTML = '';
  
  Object.entries(selectedProfession.expenses).forEach(([key, value]) => {
    if (key !== 'childExpensePerChild') {
      const expenseItem = document.createElement('div');
      expenseItem.className = 'expense-item';
      expenseItem.innerHTML = `
        <label>${expenseLabels[key]}:</label>
        <span>$${value.toLocaleString()}</span>
      `;
      fixedExpensesContainer.appendChild(expenseItem);
    }
  });
}

function renderLiabilities() {
  const liabilitiesContainer = document.getElementById('liabilitiesList');
  if (!liabilitiesContainer || !selectedProfession) return;

  const liabilityLabels = {
    homeMortgage: '–ò–ø–æ—Ç–µ–∫–∞ –Ω–∞ –¥–æ–º',
    schoolLoan: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ',
    carLoan: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
    creditCards: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã',
    retailDebt: '–†–æ–∑–Ω–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏'
  };

  liabilitiesContainer.innerHTML = '';

  Object.entries(selectedProfession.liabilities || {}).forEach(([key, value]) => {
    const item = document.createElement('div');
    item.className = 'liability-item';
    item.innerHTML = `
      <span>${liabilityLabels[key] || key}</span>
      <span>$${value}</span>
    `;
    liabilitiesContainer.appendChild(item);
  });
}

function updateTotalIncome() {
  let totalIncome = selectedProfession.salary;
  
  // –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
  const investments = parseFloat(document.getElementById('investments').value) || 0;
  const dividends = parseFloat(document.getElementById('dividends').value) || 0;
  const realEstateBusiness = parseFloat(document.getElementById('realEstateBusiness').value) || 0;
  const businessIncome1 = parseFloat(document.getElementById('businessIncome1').value) || 0;
  const businessIncome2 = parseFloat(document.getElementById('businessIncome2').value) || 0;
  
  // –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
  const additionalIncomes = document.querySelectorAll('.additional-income');
  additionalIncomes.forEach(input => {
    totalIncome += parseFloat(input.value) || 0;
  });
  
  totalIncome += investments + dividends + realEstateBusiness + businessIncome1 + businessIncome2;
  totalIncome += gameData.passiveIncome;

  document.getElementById('totalIncomeAmount').textContent = totalIncome.toLocaleString();

  updateCashFlow();
}

function updateChildrenExpenses() {
  const childrenCount = parseInt(document.getElementById('childrenCount').value) || 0;
  gameData.children = childrenCount;

  const childExpense = childrenCount * selectedProfession.expenses.childExpensePerChild;
  document.getElementById('childrenExpensesAmount').textContent = childExpense.toLocaleString();

  updateTotalExpenses();
}

function updateTotalExpenses() {
  if (!selectedProfession) return;

  let totalExpenses = 0;
  
  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
  Object.entries(selectedProfession.expenses).forEach(([key, value]) => {
    if (key !== 'childExpensePerChild') {
      totalExpenses += value;
    }
  });
  
  // –î–µ—Ç—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
  totalExpenses += gameData.children * selectedProfession.expenses.childExpensePerChild;
  
  document.getElementById('totalExpensesAmount').textContent = totalExpenses.toLocaleString();

  updateCashFlow();
  return totalExpenses;
}

function updateCashFlow() {
  const totalIncomeText = document.getElementById('totalIncomeAmount').textContent;
  const totalExpensesText = document.getElementById('totalExpensesAmount').textContent;

  const totalIncome = parseNumeric(totalIncomeText);
  const totalExpenses = parseNumeric(totalExpensesText);

  const cashFlow = totalIncome - totalExpenses;
  document.getElementById('cashFlowAmount').textContent = `$${cashFlow.toLocaleString()}`;
  document.getElementById('cashFlowAmount').style.color = cashFlow >= 0 ? '#10b981' : '#ef4444';

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫—Ä—É–≥
  checkSecondRound();
}

function updateAvailableCredit() {
  const cashFlowText = document.getElementById('cashFlowAmount').textContent;
  const cashFlow = parseNumeric(cashFlowText);
  const availableCredit = Math.max(0, Math.round(cashFlow * 10));
  document.getElementById('availableCredit').textContent = availableCredit.toLocaleString();
}

function parseNumeric(value) {
  if (typeof value === 'number') return value;
  if (!value) return 0;
  const normalized = value.toString().replace(/[^0-9.-]/g, '');
  const parsed = parseFloat(normalized);
  return isNaN(parsed) ? 0 : parsed;
}

function showCashflowStage(stage) {
  if (stage === 2 && !stageTwoUnlocked) {
    return;
  }

  cashFlowStage = stage;

  const stage1Form = document.getElementById('stage1Form');
  const stage2Form = document.getElementById('stage2Form');
  if (stage1Form) {
    stage1Form.classList.toggle('active', stage === 1);
  }
  if (stage2Form) {
    stage2Form.classList.toggle('active', stage === 2);
  }

  updateCashFlowDisplay();
  updateStageButtons();
}

function updateStageButtons() {
  const stage1Button = document.getElementById('stage1Button');
  const stage2Button = document.getElementById('stage2Button');

  if (stage1Button) {
    stage1Button.classList.toggle('active', cashFlowStage === 1);
  }

  if (stage2Button) {
    stage2Button.disabled = !stageTwoUnlocked;
    stage2Button.classList.toggle('active', cashFlowStage === 2);
  }

  const stageLabel = document.getElementById('cashflowStageLabel');
  if (stageLabel) {
    stageLabel.textContent = cashFlowStage === 1 ? '–≠—Ç–∞–ø 1: –ö—Ä—ã—Å–∏–Ω—ã–π –±–µ–≥' : '–≠—Ç–∞–ø 2: –ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–µ–∫';
  }
}

function updateStage2Display() {
  const passiveList = document.getElementById('stage2PassiveList');
  if (!passiveList) return;

  const basePassive = stageTwoBasePassive;
  const fastTrackPassive = stageTwoInitialPassive;
  const additionalPassive = stageTwoAdditionalPassive;

  const baseElement = document.getElementById('stage2BasePassive');
  if (baseElement) {
    baseElement.textContent = basePassive.toLocaleString();
  }

  const passiveIncomeElement = document.getElementById('stage2PassiveIncome');
  if (passiveIncomeElement) {
    passiveIncomeElement.textContent = fastTrackPassive.toLocaleString();
  }

  const walletElement = document.getElementById('stage2WalletAmount');
  if (walletElement) {
    walletElement.textContent = gameData.wallet.toLocaleString();
  }

  const totalPassiveElement = document.getElementById('stage2TotalPassive');
  if (totalPassiveElement) {
    totalPassiveElement.textContent = getStageTwoPassiveIncome().toLocaleString();
  }

  const targetElement = document.getElementById('stage2TargetIncome');
  if (targetElement) {
    targetElement.textContent = (stageTwoInitialPassive + STAGE_TWO_TARGET_INCREMENT).toLocaleString();
  }

  passiveList.innerHTML = '';

  const baseItem = document.createElement('li');
  baseItem.innerHTML = `<span>–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —ç—Ç–∞–ø–∞ 1</span><span>$${basePassive.toLocaleString()}</span>`;
  passiveList.appendChild(baseItem);

  const scaledItem = document.createElement('li');
  scaledItem.innerHTML = `<span>–ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–µ–∫ (√ó100)</span><span>$${fastTrackPassive.toLocaleString()}</span>`;
  passiveList.appendChild(scaledItem);

  const additionalItem = document.createElement('li');
  additionalItem.innerHTML = `<span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —ç—Ç–∞–ø–∞ 2</span><span>$${additionalPassive.toLocaleString()}</span>`;
  passiveList.appendChild(additionalItem);

  updateStageGoalStatus();
}

function getStageTwoPassiveIncome() {
  return stageTwoInitialPassive + stageTwoAdditionalPassive;
}

function addStageTwoPassiveIncome() {
  if (!stageTwoUnlocked) {
    showModal('–≠—Ç–∞–ø 2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ü–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞.');
    return;
  }

  const input = document.getElementById('stage2PassiveInput');
  const amount = parseFloat(input?.value);

  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.');
    return;
  }

  stageTwoAdditionalPassive += amount;
  if (input) {
    input.value = '';
  }

  updateStage2Display();
  updateStageGoalStatus();

  showModal('–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', `+$${amount.toLocaleString()}`);
}

function toggleDreamPurchase() {
  if (!stageTwoUnlocked) return;

  const checkbox = document.getElementById('dreamPurchased');
  dreamPurchased = checkbox ? checkbox.checked : false;
  updateStageGoalStatus();
}

function updateStageGoalStatus() {
  const status = document.getElementById('stage2GoalStatus');
  if (!status) return;

  if (!stageTwoUnlocked) {
    status.classList.remove('success', 'warning');
    status.textContent = '–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.';
    return;
  }

  const targetPassive = stageTwoInitialPassive + STAGE_TWO_TARGET_INCREMENT;
  const currentPassive = getStageTwoPassiveIncome();

  status.classList.remove('success', 'warning');

  if (dreamPurchased) {
    status.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ú–µ—á—Ç–∞ –∫—É–ø–ª–µ–Ω–∞ ‚Äî –ø–æ–±–µ–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
    status.classList.add('success');
    return;
  }

  if (currentPassive >= targetPassive) {
    status.textContent = '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ $50 000 –∏ –±–æ–ª–µ–µ.';
    status.classList.add('success');
    return;
  }

  const remaining = targetPassive - currentPassive;
  status.textContent = `–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –µ—â–µ –Ω–∞ $${remaining.toLocaleString()}.`;
  status.classList.add('warning');
}

function addIncome() {
  const amount = parseFloat(document.getElementById('transactionAmount').value);
  const note = document.getElementById('transactionNote').value;
  
  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞');
    return;
  }

  gameData.wallet += amount;
  updateCashFlowDisplay();

  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  document.getElementById('transactionAmount').value = '';
  document.getElementById('transactionNote').value = '';

  const formattedAmount = amount.toLocaleString();
  showModal('–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', `+$${formattedAmount}${note ? ` (${note})` : ''}`);
}

function addExpense() {
  const amount = parseFloat(document.getElementById('transactionAmount').value);
  const note = document.getElementById('transactionNote').value;
  
  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞');
    return;
  }
  
  if (amount > gameData.wallet) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ');
    return;
  }
  
  gameData.wallet -= amount;
  updateCashFlowDisplay();

  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  document.getElementById('transactionAmount').value = '';
  document.getElementById('transactionNote').value = '';

  const formattedAmount = amount.toLocaleString();
  showModal('–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', `-$${formattedAmount}${note ? ` (${note})` : ''}`);
}

function takeCredit() {
  const availableCredit = parseNumeric(document.getElementById('availableCredit').textContent);

  if (availableCredit <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫. –ö—Ä–µ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    return;
  }

  const formattedCredit = availableCredit.toLocaleString();

  if (confirm(`–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –Ω–∞ —Å—É–º–º—É $${formattedCredit}?`)) {
    gameData.wallet += availableCredit;
    updateCashFlowDisplay();
    showModal('–ö—Ä–µ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω', `+$${formattedCredit}`);
  }
}

function addStock(button) {
  const row = button.closest('tr');
  const inputs = row.querySelectorAll('input');
  
  const name = inputs[0].value;
  const quantity = parseFloat(inputs[1].value);
  const price = parseFloat(inputs[2].value);
  const monthlyIncome = parseFloat(inputs[3].value);
  
  if (!name || !quantity || !price || !monthlyIncome) {
    showModal('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  
  const totalCost = quantity * price;
  
  if (totalCost > gameData.wallet) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    return;
  }
  
  // –°–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
  gameData.wallet -= totalCost;
  gameData.passiveIncome += monthlyIncome;
  
  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫—Ç–∏–≤—ã
  gameData.assets.push({
    type: 'stock',
    name: name,
    quantity: quantity,
    price: price,
    monthlyIncome: monthlyIncome,
    totalCost: totalCost
  });
  
  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  inputs.forEach(input => input.value = '');
  
  updateCashFlowDisplay();
  updateTotalIncome();
  
  showModal('–ê–∫—Ç–∏–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω', `${name}: +$${monthlyIncome}/–º–µ—Å`);
}

function addRealEstate(button) {
  const row = button.closest('tr');
  const inputs = row.querySelectorAll('input');
  
  const name = inputs[0].value;
  const downPayment = parseFloat(inputs[1].value);
  const totalPrice = parseFloat(inputs[2].value);
  const monthlyIncome = parseFloat(inputs[3].value);
  
  if (!name || !downPayment || !totalPrice || !monthlyIncome) {
    showModal('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  
  if (downPayment > gameData.wallet) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞');
    return;
  }
  
  // –°–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
  gameData.wallet -= downPayment;
  gameData.passiveIncome += monthlyIncome;
  
  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫—Ç–∏–≤—ã
  gameData.assets.push({
    type: 'realestate',
    name: name,
    downPayment: downPayment,
    totalPrice: totalPrice,
    monthlyIncome: monthlyIncome
  });
  
  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  inputs.forEach(input => input.value = '');
  
  updateCashFlowDisplay();
  updateTotalIncome();
  
  showModal('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞', `${name}: +$${monthlyIncome}/–º–µ—Å`);
}

function addBusiness(button) {
  const row = button.closest('tr');
  const inputs = row.querySelectorAll('input');
  
  const name = inputs[0].value;
  const downPayment = parseFloat(inputs[1].value);
  const totalPrice = parseFloat(inputs[2].value);
  const monthlyIncome = parseFloat(inputs[3].value);
  
  if (!name || !downPayment || !totalPrice || !monthlyIncome) {
    showModal('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  
  if (downPayment > gameData.wallet) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞');
    return;
  }
  
  // –°–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
  gameData.wallet -= downPayment;
  gameData.passiveIncome += monthlyIncome;
  
  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫—Ç–∏–≤—ã
  gameData.assets.push({
    type: 'business',
    name: name,
    downPayment: downPayment,
    totalPrice: totalPrice,
    monthlyIncome: monthlyIncome
  });
  
  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  inputs.forEach(input => input.value = '');
  
  updateCashFlowDisplay();
  updateTotalIncome();
  
  showModal('–ë–∏–∑–Ω–µ—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω', `${name}: +$${monthlyIncome}/–º–µ—Å`);
}

function checkSecondRound() {
  if (stageTwoUnlocked || !selectedProfession) return;

  const notification = document.getElementById('secondRoundNotification');
  if (!notification) return;

  const totalExpenses = parseNumeric(document.getElementById('totalExpensesAmount').textContent) || 0;
  const childBuffer = selectedProfession.expenses.childExpensePerChild || 0;

  if (gameData.passiveIncome >= totalExpenses + childBuffer && totalExpenses > 0) {
    notification.style.display = 'flex';
  }
}

function goToSecondRound() {
  const notification = document.getElementById('secondRoundNotification');
  if (notification) {
    notification.style.display = 'none';
  }

  stageTwoUnlocked = true;
  stageTwoBasePassive = gameData.passiveIncome;
  stageTwoInitialPassive = stageTwoBasePassive * 100;
  stageTwoAdditionalPassive = 0;
  dreamPurchased = false;

  const stage2Button = document.getElementById('stage2Button');
  if (stage2Button) {
    stage2Button.disabled = false;
  }

  showModal('–ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–µ–∫!', `–í–∞—à –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω –¥–æ $${stageTwoInitialPassive.toLocaleString()}.`);

  showCashflowStage(2);
  updateStage2Display();
  updateStageButtons();
}

// === –°–ï–ö–†–ï–¢ –î–ï–ù–ï–ì –ò–ì–†–ê ===

function initializeSecretGame() {
  if (!selectedProfession) return;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  gameData.wallet = selectedProfession.savings;
  gameData.secretData = {
    inventory: 100,
    passiveIncome: 0,
    networkIncome: 0,
    round: 1
  };
  
  updateSecretDisplay();
}

function updateSecretDisplay() {
  if (!selectedProfession) return;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  document.getElementById('secretProfessionName').textContent = selectedProfession.name;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  document.getElementById('secretWallet').textContent = gameData.wallet.toLocaleString();
  document.getElementById('secretSalary').textContent = selectedProfession.salary.toLocaleString();
  document.getElementById('secretExpenses').textContent = selectedProfession.expenses.toLocaleString();
  document.getElementById('secretProfit').textContent = selectedProfession.profit.toLocaleString();
  
  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  updateSecretProgress();
}

function updateSecretProgress() {
  const target = gameData.secretData.round === 1 ? 200000 : 300000;
  const current = gameData.secretData.round === 1 ? gameData.wallet : gameData.secretData.passiveIncome;
  const progress = Math.min((current / target) * 100, 100);
  
  const progressBar = document.getElementById('secretProgress');
  if (progressBar) {
    progressBar.style.width = `${progress}%`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥
  if (progress >= 100) {
    checkSecretRoundTransition();
  }
}

function receiveSecretSalary() {
  gameData.wallet += selectedProfession.salary;
  updateSecretDisplay();
  showModal('–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞', `+‚ÇΩ${selectedProfession.salary.toLocaleString()}`);
}

function paySecretExpenses() {
  if (gameData.wallet < selectedProfession.expenses) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤');
    return;
  }
  
  gameData.wallet -= selectedProfession.expenses;
  updateSecretDisplay();
  showModal('–†–∞—Å—Ö–æ–¥—ã –æ–ø–ª–∞—á–µ–Ω—ã', `-‚ÇΩ${selectedProfession.expenses.toLocaleString()}`);
}

function addSecretCustomIncome() {
  const amount = parseFloat(document.getElementById('secretCustomAmount').value);
  
  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  
  gameData.wallet += amount;
  updateSecretDisplay();
  
  document.getElementById('secretCustomAmount').value = '';
  showModal('–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', `+‚ÇΩ${amount.toLocaleString()}`);
}

function addSecretCustomExpense() {
  const amount = parseFloat(document.getElementById('secretCustomAmount').value);
  
  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  
  if (amount > gameData.wallet) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    return;
  }
  
  gameData.wallet -= amount;
  updateSecretDisplay();
  
  document.getElementById('secretCustomAmount').value = '';
  showModal('–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', `-‚ÇΩ${amount.toLocaleString()}`);
}

function checkSecretRoundTransition() {
  if (gameData.secretData.round === 1 && gameData.wallet >= 200000) {
    showModal('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 2-–π –∫—Ä—É–≥!', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ ‚ÇΩ200,000');
    gameData.secretData.round = 2;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫—Ä—É–≥
    document.getElementById('secretRound1').style.display = 'none';
    document.getElementById('secretRound2').style.display = 'block';
    document.getElementById('roundIndicator').textContent = '–ö—Ä—É–≥ 2';
  } else if (gameData.secretData.round === 2 && gameData.secretData.passiveIncome >= 300000) {
    showModal('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 3-–π –∫—Ä—É–≥!', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ‚ÇΩ300,000');
    gameData.secretData.round = 3;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç—Ä–µ—Ç–∏–π –∫—Ä—É–≥
    document.getElementById('secretRound2').style.display = 'none';
    document.getElementById('secretRound3').style.display = 'block';
    document.getElementById('roundIndicator').textContent = '–§–∏–Ω–∞–ª—å–Ω—ã–π –∫—Ä—É–≥';
  }
}

function sellProducts() {
  const salePercent = parseFloat(document.getElementById('salePercent').value);
  const salePrice = parseFloat(document.getElementById('salePrice').value);
  const productPrice = parseFloat(document.getElementById('productPrice').value);
  
  if (!salePercent || !salePrice || salePercent <= 0 || salePercent > 100) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (1-100)');
    return;
  }
  
  if (salePercent / 100 > gameData.secretData.inventory / 100) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ');
    return;
  }
  
  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä—É—á–∫—É
  const revenue = (salePercent / 100) * salePrice;
  const cost = (salePercent / 100) * productPrice;
  const profit = revenue - cost;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
  gameData.secretData.inventory -= salePercent;
  gameData.wallet += revenue;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  document.getElementById('inventoryAmount').textContent = `${gameData.secretData.inventory}%`;
  updateSecretDisplay();
  
  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
  document.getElementById('salePercent').value = '';
  document.getElementById('salePrice').value = '';
  
  showModal('–¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω', `–í—ã—Ä—É—á–∫–∞: ‚ÇΩ${revenue.toLocaleString()}, –ü—Ä–∏–±—ã–ª—å: ‚ÇΩ${profit.toLocaleString()}`);
}

function payWarehouseExpenses() {
  const warehouseCost = 100000;
  
  if (gameData.wallet < warehouseCost) {
    showModal('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–∫–ª–∞–¥–∞');
    return;
  }
  
  gameData.wallet -= warehouseCost;
  updateSecretDisplay();
  showModal('–°–∫–ª–∞–¥ –æ–ø–ª–∞—á–µ–Ω', `-‚ÇΩ${warehouseCost.toLocaleString()}`);
}

function addNetworkIncome() {
  const amount = parseFloat(document.getElementById('networkIncome').value);
  
  if (!amount || amount <= 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  
  gameData.wallet += amount;
  gameData.secretData.networkIncome += amount;
  
  updateSecretDisplay();
  document.getElementById('networkIncome').value = '';
  
  showModal('–î–æ—Ö–æ–¥ –æ—Ç —Å–µ—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω', `+‚ÇΩ${amount.toLocaleString()} (–∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥)`);
}

function calculateShares() {
  const stock1 = parseFloat(document.getElementById('stock1').value) || 0;
  const stock2 = parseFloat(document.getElementById('stock2').value) || 0;
  const stock3 = parseFloat(document.getElementById('stock3').value) || 0;
  const stock4 = parseFloat(document.getElementById('stock4').value) || 0;
  
  if (stock1 === 0 || stock2 === 0 || stock3 === 0 || stock4 === 0) {
    showModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ 4 —Ü–µ–Ω—ã –∞–∫—Ü–∏–π');
    return;
  }
  
  const average = (stock1 + stock2 + stock3 + stock4) / 4;
  document.getElementById('shareResult').innerHTML = `
    <strong>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–∞—è: ‚ÇΩ${average.toFixed(2)}</strong>
  `;
  
  showModal('–ü–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω', `–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚ÇΩ${average.toFixed(2)}`);
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===

function showModal(title, message) {
  const modal = document.getElementById('modal');
  const modalMessage = document.getElementById('modalMessage');
  
  modalMessage.innerHTML = `
    <h3>${title}</h3>
    <p>${message}</p>
  `;
  
  modal.style.display = 'block';
}

function closeModal() {
  document.getElementById('modal').style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
  const modal = document.getElementById('modal');
  if (event.target === modal) {
    closeModal();
  }
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê ===

function checkLocalStorageAvailability() {
  try {
    if (typeof window === 'undefined' || !('localStorage' in window)) {
      return false;
    }

    const testKey = '__cashflow_storage_test__';
    window.localStorage.setItem(testKey, '1');
    window.localStorage.removeItem(testKey);
    return true;
  } catch (error) {
    console.warn('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ.', error);
    return false;
  }
}

function saveGameData() {
  if (!isStorageAvailable) {
    return;
  }

  try {
    const dataToSave = {
      currentScreen: currentScreen,
      currentUser: currentUser,
      selectedProfession: selectedProfession,
      gameType: gameType,
      gameData: gameData,
      version: APP_VERSION,
      timestamp: new Date().toISOString()
    };

    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

function loadGameData() {
  if (!isStorageAvailable) {
    return;
  }

  let savedData = null;

  try {
    savedData = localStorage.getItem(STORAGE_KEY);
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
    isStorageAvailable = false;
    return;
  }

  if (!savedData) {
    return;
  }

  try {
    const data = JSON.parse(savedData);

    if (!data || typeof data !== 'object') {
      localStorage.removeItem(STORAGE_KEY);
      return;
    }

    if (!data.version || data.version !== APP_VERSION) {
      pendingUpdateNotice = '–ú—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã –¥–æ –≤–µ—Ä—Å–∏–∏ 1.1.0 –∏ —Å–±—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.';
      localStorage.removeItem(STORAGE_KEY);
      return;
    }

    if (data.currentUser) {
      currentUser = data.currentUser;
    }

    if (data.selectedProfession) {
      selectedProfession = data.selectedProfession;
    }

    if (data.gameType) {
      gameType = data.gameType;
    }

    if (data.gameData) {
      gameData = { ...gameData, ...data.gameData };
    }

    // –ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentScreen, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    localStorage.removeItem(STORAGE_KEY);
  }
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function resetGameData() {
  if (!isStorageAvailable) {
    location.reload();
    return;
  }

  if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã?')) {
    localStorage.removeItem(STORAGE_KEY);
    location.reload();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportGameData() {
  const dataToExport = {
    currentUser: currentUser,
    selectedProfession: selectedProfession,
    gameType: gameType,
    gameData: gameData,
    version: APP_VERSION,
    exportDate: new Date().toISOString()
  };
  
  const dataStr = JSON.stringify(dataToExport, null, 2);
  const dataBlob = new Blob([dataStr], {type: 'application/json'});
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `cash_flow_data_${new Date().toISOString().split('T')[0]}.json`;
  link.click();
}